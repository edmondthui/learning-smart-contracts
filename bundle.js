App={loading:!1,contracts:{},load:async()=>{void 0!==window.ethereum&&(console.log("MetaMask is installed!"),await App.loadAccount(),await App.loadContract(),await App.render())},loadAccount:async()=>{const o=await window.ethereum.request({method:"eth_requestAccounts"}).catch((o=>{console.error(o.message)}));App.account=o[0],console.log(App.account)},loadContract:async()=>{const o=await $.getJSON("build/contracts/TodoList.json");console.log(o),App.contracts.TodoList=TruffleContract(o),App.contracts.TodoList.setProvider(window.web3.currentProvider),App.todoList=await App.contracts.TodoList.deployed()},render:async()=>{App.loading||(App.toggleLoading(!0),$("#account").html(App.account),await App.renderTasks(),App.toggleLoading(!1))},renderTasks:async()=>{const o=await App.todoList.taskCount(),t=$(".taskTemplate");for(let a=1;a<=o;a++){const o=await App.todoList.tasks(a);console.log(o);const e=o[0].toNumber(),n=o[1],c=o[2],p=t.clone();p.find(".content").html(n),p.find("input").prop("name",e).prop("checked",c).on("click",App.toggleCompleted),c?$("#completedTaskList").append(p):$("#taskList").append(p),p.show()}},createTask:async()=>{App.toggleLoading(!0);const o=$("#newTask").val();await App.todoList.createTask(o,{from:App.account}).catch((()=>{console.error(e.message)})),window.location.reload()},toggleCompleted:async o=>{App.toggleLoading(!0);const t=o.target.name;await App.todoList.toggleCompleted(t,{from:App.account}),window.location.reload()},toggleLoading:o=>{App.loading=o;const t=$("#loader"),a=$("#content");o?(t.show(),a.hide()):(t.hide(),a.show())}},$((()=>{$(window).load((()=>{App.load()}))}));